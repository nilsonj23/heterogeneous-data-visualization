<!DOCTYPE html>
<html>
<head>
    <title><%= title %></title>

    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">

    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.1.1/css/bootstrap.min.css" integrity="sha384-WskhaSGFgHYWDcbwN70/dfYBj47jz9qbsMId/iRN3ewGhXQFZCSftd1LZCfmhktB" crossorigin="anonymous">

    <link rel='stylesheet' href='/stylesheets/style.css' />

    <!-- JQuery -->
    <script type="text/javascript" src="/jquery/jquery-3.5.1.min.js"></script>

    <!-- Load d3.js -->
    <script type="text/javascript" src="https://d3js.org/d3.v4.js"></script>

    <!-- Conversão de cor -->
    <script type="text/javascript" src="/js/w3color.js"></script>

    <!-- Funcionalidades -->
    <script type="text/javascript" src="/js/exemplo.js?v=datetime()"></script>

    <!-- TESTE GRAFICO SANKEY -->
    <!-- Load the sankey.js function -->
    <script src="https://cdn.jsdelivr.net/gh/holtzy/D3-graph-gallery@master/LIB/sankey.js"></script>
    <!-- Add style to links or they won't appear properly-->
    <style>
        .link {
            fill: none;
            stroke: #000;
            stroke-opacity: .2;
        }
        .link:hover {
            stroke-opacity: .5;
        }
        .barra_vermelha {
	        fill: #FF0000;
        }
        .barra_azul {
	        fill: #0000FF;
        }
    </style>

</head>

<body>
    <!-----------------------------------------------------  Cabeçalho  ------------------------------------------------->

    <nav class="navbar navbar-expand-lg navbar-dark" id="cab">
      <div class="container">
                                
        <!-- navbar-brnad : É o nome de destaque que fica na lateral esquerda do navbar -->
        <a class="navbar-brand h1 mb-0" href="#">VisHD</a>

        <!-- Botão de expandir e recolher do navbar -->
        <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarSite">
            <span class="navbar-toggler-icon"></span>
        </button>
      <ul class="navbar-nav ">
        <li class="nav-item">
          <a class="nav-link" href="/">Início</a>
        </li>
        <li class="nav-item active">
            <a class="nav-link" href="#">Análise</a>
          </li>
          <!--
        <li class="nav-item">
          <a class="nav-link" href="/visualizacao">Visualização</a>
        </li> -->
      </ul>
      </div>
    </nav>

    <!-----------------------------------------------------  Scrollspy  ------------------------------------------------->
      
    <div class="container">

      <div class="row">
      
          <!-- my-5 : margem em todo eixo y, tanto margem top como margem bottom -->
          <div class="col-12 text-center my-5">
              <h1>   Tipos de Visualizações de Dados</h1>
              <p>Aqui você pode ver os seus dados imputados de forma visual:</p>
          </div>
      </div>

      <!--
      <button class="btn btn-success mt-2 text-center btn-sm" type="button" id="btGraficoPIB">Gráfico</button>
      <button class="btn btn-success mt-2 text-center btn-sm" type="button" id="btSankey1">Sankey 1</button>
      -->

        <div class="row" id="div_buttons" style="margin-bottom:5px !important;">
        </div>

      <div>
        <div id="content" class="col-sm-12">
  
                <table class="table" id="tabelaDados">
                    <thead></thead>
                    <tbody></tbody>
                </table>
  
        </div>

        <div id="resumo" class="col-sm-6">
        </div>
  
        <div id="chart" class="col-sm-12">
        </div>

        <div id="chart2" class="col-sm-12" style="background-color: #ccc;">
        </div>
  
      </div>

  </div> 

  <!----------------------------------------------- Footer -------------------------------------------->
    <div class="container-fluid mt-5">
      <div class="row footer-top">
        <div class="col-sm-4 text-center">
          <h4 class="ft-text-title mb-4">Projeto VisHD</h4>
          <h6 class="ft-desp">UERJ - Universidade do Rio de Janeiro 
            <br>IME - Instituto de Matematica e Estatistica
            <br>Ciência da Computação
            <p class="mt-3"><b>Coordenado por Marcelo Schots</b></p>
          </h6>
        </div>
          <div class="col-sm-4 text-center border-left">
            <h4 class="ft-text-title">Autores:</h4>
            <div class="address-member">
              <p class="member mb-2">Aislan Célio Ferreira</p>
              <p class="member mb-2">Claudio Henrique Medaber Jambo</p>
              <p class="member mb-2">Gedir Fabiano de Moraes Gonçalves</p>
              <p class="member mb-2">Nilson Junio Souza da Silva</p>
              <p class="member mb-2">Paulo Victor Pimentel Coelho</p>
            </div>
          </div>
          <div class="col-sm-4 col-xs-12 text-center border-left">
            <h4 class="ft-text-title">Sobre</h4>
            <div class="pspt-dtls">
              <a href="https://www.overleaf.com/project/5f643f5245a1ac0001a631df" class="about">Artigo</a>
              <a href="https://github.com/nilsonj23/heterogeneous-data-visualization" class="team">Git</a>
            </div>
          </div>
      </div>
      <div class="row ft-copyright pt-2 pb-2" style="padding-left: 25px;">
				<div class="col-xs-12 col-sm-12 col-md-12 mt-2 mt-sm-2 text-center text-white">
					<p class="mb-0 mt-0">© Copyright 2020 | All Rights Reserved.</p>
				</div>
				<hr>
			</div>	
      </div>
    </div>


    <script type="text/javascript">
  
        var myJsonDoc;
        var myJsonMap;

        var myData;
        var myDataFields;

        var datasets;
        var dataset;

        var chartBuilded = 0;
        var margin;
        var svg;
        var x;
        var xAxis;
        var y;
        var yAxis;

        
        
        
        var xAxisTitle;



        function getConfigColors(fgColor, bgColor) {
            // Ajustando as cores do texto e do fundo.
            objFgColor = {erro:1};
            objBgColor = {erro:1};
            if (fgColor !== undefined)
                objFgColor = convertColor(fgColor);
            if (bgColor !== undefined)
                objBgColor = convertColor(bgColor);

            //console.log(objFgColor);
            //console.log(objBgColor);

            if ( (objFgColor['erro']!==undefined) || (objBgColor['erro']!==undefined) ) {
                fgColor = '#000000';
                bgColor = '#FFFFFF';
            } else {
                fgColor = objFgColor.toHexString();
                bgColor = objBgColor.toHexString();
            }
            return { fgColor: fgColor, bgColor: bgColor};
        }

        // Ajustando o título para o gráfico
        function adjustTitleChart(n) {

            myMap = myJsonMap['visualizations'][n];

            graphTitle = ' ';
            fgColor = undefined;
            bgColor = undefined;
            // se o título não foi informado, não apresentaremos nada
            if ((myMap['title'] !== undefined) && (myMap['title']['content'] !== undefined)) {
                graphTitle = myMap['title']['content'];
                
                if (myMap['title']['fgColor'] !== undefined)
                    fgColor = myMap['title']['fgColor'];

                if (myMap['title']['bgColor'] !== undefined)
                    bgColor = myMap['title']['bgColor'];
            }
            cores = getConfigColors(fgColor, bgColor);

            svg.select('#graphHeaderTitle')
                .text(graphTitle)
                .attr('x', parseInt((width -margin.left-margin.right- graphTitle.length) / 2) )
                .attr('y', 0 - margin.top/2 )
                .attr('stroke', 'none')
                .attr('fill', cores.fgColor);

            bbox = svg.select('#graphHeaderTitle').node().getBBox();
            padding = 2;
            svg.select('#graphHeaderBackground')
                .attr('x', bbox.x - padding)
                .attr('y', bbox.y - padding)
                .attr('width', bbox.width + (2*padding))
                .attr('height', bbox.height + (2*padding))
                .attr('stroke', 'none')
                .attr('fill', cores.bgColor);
        }


        // Ajustando o título para o eixo X
        function adjustTitleX(n) {

            myMap = myJsonMap['visualizations'][n];

            tituloString = myMap['components']['x']['field'];
            fgColor = undefined;
            bgColor = undefined;
            // se o título não foi informado, usaremos o nome da prória variável (campo).
            if ( (myMap['components']['x']['title'] !== undefined) && (myMap['components']['x']['title']['content'] !== undefined) ) {
                tituloString = myMap['components']['x']['title']['content'];
                
                if (myMap['components']['x']['title']['fgColor'] !== undefined)
                    fgColor = myMap['components']['x']['title']['fgColor'];

                if (myMap['components']['x']['title']['bgColor'] !== undefined)
                    bgColor = myMap['components']['x']['title']['bgColor'];
            }
            cores = getConfigColors(fgColor, bgColor);

            svg.select('#xAxisHeaderTitle')
                .text(tituloString)
                .attr('x', parseInt((width -margin.left-margin.right- tituloString.length) / 2) )
                .attr('y', height + margin.bottom - 10 )
                .attr('stroke', 'none')
                .attr('fill', cores.fgColor);

            bbox = svg.select('#xAxisHeaderTitle').node().getBBox();
            padding = 2;
            svg.select('#xAxisHeaderBackground')
                .attr('x', bbox.x - padding)
                .attr('y', bbox.y - padding)
                .attr('width', bbox.width + (2*padding))
                .attr('height', bbox.height + (2*padding))
                .attr('stroke', 'none')
                .attr('fill', cores.bgColor);
        }

        // Ajustando o título para o eixo Y
        function adjustTitleY(n) {

            myMap = myJsonMap['visualizations'][n];

            tituloString = myMap['components']['y']['field'];
            fgColor = undefined;
            bgColor = undefined;
            // se o título não foi informado, usaremos o nome da prória variável (campo).
            if ( (myMap['components']['y']['title'] !== undefined) && (myMap['components']['y']['title']['content'] !== undefined) ) {
                tituloString = myMap['components']['y']['title']['content'];
                
                if (myMap['components']['y']['title']['fgColor'] !== undefined)
                    fgColor = myMap['components']['y']['title']['fgColor'];

                if (myMap['components']['y']['title']['bgColor'] !== undefined)
                    bgColor = myMap['components']['y']['title']['bgColor'];
            }
            cores = getConfigColors(fgColor, bgColor);

            svg.select('#yAxisHeaderTitle')
                .text(tituloString)
                .attr('stroke', 'none')
                .attr('fill', cores.fgColor);

            bbox = svg.select('#yAxisHeaderTitle').node().getBBox();
            padding = 2;
            svg.select('#yAxisHeaderBackground')
                .attr('x', bbox.x - padding)
                .attr('y', bbox.y - padding)
                .attr('width', bbox.width + (2*padding))
                .attr('height', bbox.height + (2*padding))
                .attr('stroke', 'none')
                .attr('fill', cores.bgColor);
        }


        function mostrarSankey1() {
            console.log('mostrarSankey1');

            /*
            // Regiao, Nivel, Disciplina
            //Baixada			Mestrado		Engenharia de Software
            //Zona Norte		Graduação		Lógica de Computação
            //Zona Oeste		Doutorado		Algoritmos em Grafos
            //Zona Sul					        Banco de Dados
            //                                  Sistemas Operacionais I
            dataChart = {
                "nodes":[
                    {"node":0,"name":"Baixada"},
                    {"node":1,"name":"Zona Norte"},
                    {"node":2,"name":"Zona Oeste"},
                    {"node":3,"name":"Zona Sul"},
                    {"node":4,"name":"Graduação"},
                    {"node":5,"name":"Mestrado"},
                    {"node":6,"name":"Doutorado"},
                    {"node":7,"name":"Engenharia de Software"},
                    {"node":8,"name":"Lógica de Computação"},
                    {"node":9,"name":"Algoritmos em Grafos"},
                    {"node":10,"name":"Banco de Dados"},
                    {"node":11,"name":"Sistemas Operacionais I"},
                    {"node":12,"name":"Visão Computacional"},
                    {"node":13,"name":"Álgebra Linear"}
                ],
                "links":[
                    {"source":0,"target":4,"value":1, "extra":0},
                    {"source":0,"target":5,"value":1, "extra":0},
                    {"source":1,"target":5,"value":1, "extra":0},
                    {"source":2,"target":4,"value":1, "extra":0},
                    {"source":2,"target":6,"value":1, "extra":0},
                    {"source":3,"target":4,"value":3, "extra":0},
                    {"source":4,"target":7,"value":2, "extra":0},
                    {"source":4,"target":8,"value":2, "extra":0},
                    {"source":4,"target":9,"value":1, "extra":0},
                    {"source":5,"target":10,"value":2, "extra":0},
                    {"source":5,"target":12,"value":1, "extra":0},
                    {"source":5,"target":13,"value":1, "extra":0},
                    {"source":6,"target":11,"value":1, "extra":0}
                ]
            };
            */

            dataChart = dataset;
            //console.log(dataChart);


            // set the dimensions and margins of the graph
            var margin = {top: 10, right: 20, bottom: 10, left: 10};
            // Usando a largura do componente DIV.
            var widthTexto = $('#chart2').css('width');
            var width = widthTexto.substr(0,widthTexto.length-2);
            width = width - margin.left - margin.right;
            var height = 480 - margin.top - margin.bottom;

            // append the svg object to the body of the page
            var svg = d3.select("#chart2").append("svg")
                .attr("width", width + margin.left + margin.right)
                .attr("height", height + margin.top + margin.bottom)
                .append("g")
                .attr("transform",
                    "translate(" + margin.left + "," + margin.top + ")");
            
            // Color scale used
            var color = d3.scaleOrdinal(d3.schemeCategory20);

            // Set the sankey diagram properties
            var sankey = d3.sankey()
                .size([width, height]);


            // Constructs a new Sankey generator with the default settings.
            sankey
                .nodes(dataChart.nodes)
                .links(dataChart.links)
                .layout(1);
            
            // add in the links
            var link = svg.append("g")
                .selectAll(".link")
                .data(dataChart.links)
                .enter()
                .append("path")
                .attr("class", "link")
                .attr("d", sankey.link() )
                .style("stroke-width", function(d) { return Math.max(1, d.dy); })
                .sort(function(a, b) { return b.dy - a.dy; });
            
            // add in the nodes
            var node = svg.append("g")
                .selectAll(".node")
                .data(dataChart.nodes)
                .enter().append("g")
                .attr("class", "node")
                .attr("transform", function(d) { return "translate(" + d.x + "," + d.y + ")"; })
                .call(d3.drag()
                    .subject(function(d) { return d; })
                    .on("start", function() { this.parentNode.appendChild(this); })
                    .on("drag", dragmove));
            
            // add the rectangles for the nodes
            node.append("rect")
                .attr("height", function(d) { 
                    return d.dy; 
                })
                .attr("width", sankey.nodeWidth())
                .style("fill", function(d) { 
                    console.log('fill');
                    console.log(d);
                    console.log(d.name.replace(/ .*/, ""));
                    return d.color = color(d.name);
                    //return d.color = color(d.name.replace(/ .*/, "")); 
                })
                .style("stroke", function(d) { return d3.rgb(d.color).darker(2); })
                // Add hover text
                .append("title")
                .text(function(d) { return d.name + "\n" + "Value: " + d.value ; });
        
            // add in the title for the nodes
            node.append("text")
                .attr("x", -6)
                .attr("y", function(d) { return d.dy / 2; })
                .attr("dy", ".35em")
                .attr("text-anchor", "end")
                .attr("transform", null)
                .text(function(d) { return d.name; })
                .filter(function(d) { return d.x < width / 2; })
                .attr("x", 6 + sankey.nodeWidth())
                .attr("text-anchor", "start");
            
            // the function for moving the nodes
            function dragmove(d) {
                d3.select(this)
                    .attr(  "transform",
                            "translate("
                            + d.x + ","
                            + (d.y = Math.max(
                                0, Math.min(height - d.dy, d3.event.y))
                                ) + ")"
                        );
                sankey.relayout();
                link.attr("d", sankey.link() );
            }

        }


        function showSankeyChart(n) {

            // limpar tudo.
            $('#chart2').html('');

            dataChart = datasets[n];
            //console.log(dataChart);

            // set the dimensions and margins of the graph
            var margin = {top: 10, right: 20, bottom: 10, left: 10};
            // Usando a largura do componente DIV.
            var widthTexto = $('#chart2').css('width');
            var width = widthTexto.substr(0,widthTexto.length-2);
            width = width - margin.left - margin.right;
            var height = 480 - margin.top - margin.bottom;

            // append the svg object to the body of the page
            var svg = d3.select("#chart2").append("svg")
                .attr("width", width + margin.left + margin.right)
                .attr("height", height + margin.top + margin.bottom)
                .append("g")
                .attr("transform",
                    "translate(" + margin.left + "," + margin.top + ")");
            
            // Color scale used
            var color = d3.scaleOrdinal(d3.schemeCategory20);

            // Set the sankey diagram properties
            var sankey = d3.sankey()
                .size([width, height]);


            // Constructs a new Sankey generator with the default settings.
            sankey
                .nodes(dataChart.nodes)
                .links(dataChart.links)
                .layout(1);
            
            // add in the links
            var link = svg.append("g")
                .selectAll(".link")
                .data(dataChart.links)
                .enter()
                .append("path")
                .attr("class", "link")
                .attr("d", sankey.link() )
                .style("stroke-width", function(d) { return Math.max(1, d.dy); })
                .sort(function(a, b) { return b.dy - a.dy; });
            
            // add in the nodes
            var node = svg.append("g")
                .selectAll(".node")
                .data(dataChart.nodes)
                .enter().append("g")
                .attr("class", "node")
                .attr("transform", function(d) { return "translate(" + d.x + "," + d.y + ")"; })
                .call(d3.drag()
                    .subject(function(d) { return d; })
                    .on("start", function() { this.parentNode.appendChild(this); })
                    .on("drag", dragmove));
            
            // add the rectangles for the nodes
            node.append("rect")
                .attr("height", function(d) { 
                    return d.dy; 
                })
                .attr("width", sankey.nodeWidth())
                .style("fill", function(d) { 
                    console.log('fill');
                    console.log(d);
                    console.log(d.name.replace(/ .*/, ""));
                    return d.color = color(d.name);
                    //return d.color = color(d.name.replace(/ .*/, "")); 
                })
                .style("stroke", function(d) { return d3.rgb(d.color).darker(2); })
                // Add hover text
                .append("title")
                .text(function(d) { return d.name + "\n" + "Value: " + d.value ; });
        
            // add in the title for the nodes
            node.append("text")
                .attr("x", -6)
                .attr("y", function(d) { return d.dy / 2; })
                .attr("dy", ".35em")
                .attr("text-anchor", "end")
                .attr("transform", null)
                .text(function(d) { return d.name; })
                .filter(function(d) { return d.x < width / 2; })
                .attr("x", 6 + sankey.nodeWidth())
                .attr("text-anchor", "start");
            
            // the function for moving the nodes
            function dragmove(d) {
                d3.select(this)
                    .attr(  "transform",
                            "translate("
                            + d.x + ","
                            + (d.y = Math.max(
                                0, Math.min(height - d.dy, d3.event.y))
                                ) + ")"
                        );
                sankey.relayout();
                link.attr("d", sankey.link() );
            }

        }

 
        function iniciarGrafico() {
  
            chartBuilded = 1;
    
            // set the dimensions and margins of the graph
            margin = {top: 30, right: 30, bottom: 70, left: 100},
            width = 800 - margin.left - margin.right,
            height = 400 - margin.top - margin.bottom;

            /*
            // Usando a largura do componente DIV.
            var widthTexto = $('#chart').css('width'); // 800 px
            var width = widthTexto.substr(0,widthTexto.length-2);
            width = width - margin.left - margin.right;
            var height = 480 - margin.top - margin.bottom;
            */

            // limpar tudo.
            $('#chart').html('');

            // append the svg object
            svg = d3.select('#chart')
            .append('svg')
            .attr('width', width + margin.left + margin.right)
            .attr('height', height + margin.top + margin.bottom)
            .append('g')
            .attr('transform',
                'translate(' + margin.left + ',' + margin.top + ')');
    
            // Initialize the X axis
            x = d3.scaleBand()
            .range([ 0, width ])
            .padding(0.2);
    
            xAxis = svg.append('g')
            .attr('transform', 'translate(0,' + height + ')');
    
            // Initialize the Y axis
            y = d3.scaleLinear()
            .range([ height, 0]);
    
            yAxis = svg.append('g')
            .attr('class', 'myYaxis')

            /* Elemento para o título do gráfico
            */
            graphHeader = svg.append('g').attr('id', 'graphHeader');
            graphHeader.append('rect')
            .attr('id', 'graphHeaderBackground')
            .attr('y', 0);
            graphHeader.append('text')
            .attr('id', 'graphHeaderTitle')
            .attr('y', 0)
            .attr('font-weight', 'bold')
            .text('<titulo do grafico>');

            /* Elemento para o título do eixo X
            */
            xAxisHeader = svg.append('g').attr('id', 'xAxisHeader');
            xAxisHeader.append('rect')
            .attr('id', 'xAxisHeaderBackground')
            .attr('y', 300);
            xAxisHeader.append('text')
            .attr('id', 'xAxisHeaderTitle')
            .attr('y', 300)
            .attr('font-size', 11)
            .text('<titulo do eixo X>');

            /* Elemento para o título do eixo Y
            */
            yAxisHeader = svg.append('g').attr('id', 'yAxisHeader');
            yAxisHeader.append('rect')
            .attr('id', 'yAxisHeaderBackground')
            .attr('transform', 'rotate(-90)')
            .attr('y', 0 - margin.left)
            .attr('x',0 - (height / 2))
            .attr('dy', '1em');
            yAxisHeader.append('text')
            .attr('id', 'yAxisHeaderTitle')
            .attr('transform', 'rotate(-90)')
            .attr('y', 0 - margin.left)
            .attr('x',0 - (height / 2))
            .attr('dy', '1em')
            .attr('font-size', 11)
            .style('text-anchor', 'middle')
            .text('<titulo do eixo Y>');

        }

        function getRandomColor() {
            var letters = '0123456789ABCDEF';
            var color = '#';
            for (var i=0;i<6;i++) {
                color += letters[Math.floor(Math.random() * 16)];
            }
            return color;
        }

        // Converter cor, conforme "w3color.js ver.1.18 by w3schools.com"
        // O parâmetro de entrada pode ser um colorName, um Hex, etc.
        // A saída é um objeto com várias propriedades da cor, como Hue, Sat e Lightness.
        function convertColor(corInformada) {
            c = w3color(corInformada);
            if (corInformada == "" || !c.valid) 
                return {erro:1};
            else
                return c;
        }

        function show(n) {
  
            $('#chart').hide();
            $('#chart2').hide();

            if (myJsonMap['visualizations'][n]['visualizationType'] == 'BAR_CHART') {
                $('#chart').show();
                showBarChart(n);
            } else {
                $('#chart2').show();
                showSankeyChart(n);
            }
        }

        function formatLabelX(data,param) {
            tmp = data;
            if (param=='FIRST_3LETTERS')
                tmp = data.substr(0,3);
            return tmp;
        }


        function showBarChart(n) {
  
            //if (chartBuilded == 0) iniciarGrafico();
            iniciarGrafico();

            data = datasets[n];
            myMap = myJsonMap['visualizations'][n];

            // X axis
            //x.domain(data.map(function(d) { return d[ myMap['components']['x']['field'] ] ; }))
            x.domain(data.map(function(d) { 
                param = 'FULL';
                if (    (myMap['components']['x']['value'] !== undefined) &&
                        (myMap['components']['x']['value']['dataValue'] !== undefined)
                )
                    param = myMap['components']['x']['value']['dataValue'];
                return formatLabelX(
                        d[ myMap['components']['x']['field'] ],
                        param
                );
            }));

            xAxis.transition().duration(1000);
            xAxis.call(d3.axisBottom(x));

            // Add Y axis
            //y.domain([0, d3.max(data, function(d) { return +d[selectedVar] }) ]);
            y.domain([0, d3.max(data, function(d) { return +d[ myMap['components']['y']['field'] ] }) ]);

            yAxis.transition().duration(1000);
            yAxis.call(d3.axisLeft(y));

            // Cores para as barras
            var barColorType = 'SOLID';
            var barColor = 'black';
            if (myMap['components']['bar']['colorType'] !== undefined)
                barColorType = myMap['components']['bar']['colorType'];

            if (myMap['components']['bar']['barColor'] !== undefined)
                barColor = myMap['components']['bar']['barColor'];
            
            if (barColorType=='GRADIENT') {
                var corObject = convertColor(barColor);
                if (corObject['erro']==1) {
                    barColorType = 'SOLID';
                    barColor = 'black';
                }
                else {
                    //console.log(corObject);
                    // Descartando os valores iniciais e finais, pois são muito escuros e muito claros.
                    // Assim, a faixa vai ser de 10 até 90.
                    var intervaloGradiente = Math.floor(parseFloat(80 / datasets[n].length));
                }
            }


            // variable u: map data to existing bars
            var u = svg.selectAll('.bar').data(data);

            // update bars
            u.enter()
            .append('rect')
            .merge(u)
            .transition()
            .duration(1000)
            .attr('class', 'bar')
            //.attr('x', function(d) { return x( d[ myMap['components']['x']['field'] ] ); })
            .attr('x', function(d) {
                    param = 'FULL';
                    if (    (myMap['components']['x']['value'] !== undefined) &&
                            (myMap['components']['x']['value']['dataValue'] !== undefined)
                    )
                        param = myMap['components']['x']['value']['dataValue'];
                    return x( formatLabelX(
                            d[ myMap['components']['x']['field'] ],
                            param
                    ) );
            })
            .attr('y', function(d) { return y( d[ myMap['components']['y']['field'] ] ); })
            .attr('width', x.bandwidth())
            .attr('height', function(d) { return height - y( d[ myMap['components']['y']['field'] ] ); })
            .attr('fill', function(d,i) { 
                //console.log(i);
                if (barColorType == 'SOLID') {
                    if (barColor == 'RANDOM_COLOR')
                        return getRandomColor();
                    else
                        return barColor;
                }
                else {
                    hue = corObject.hue;
                    sat = parseFloat(corObject.sat * 100);
                    lightness = parseFloat( ((i+1)*(intervaloGradiente/100)) *100 );

                    hslString = 'hsl(' + hue + ', ' + sat + '%, ' + lightness + '%)';
                    newcor = convertColor(hslString);
                    return newcor.toHexString();
                }
            });

            // Mostrando os valores individuais como tooltip.
            u = svg.selectAll('rect').selectAll('.bar').data(data)
            .enter()
            .append('title')
            .text( function(d) { return d[ myMap['components']['y']['field'] ] ; });

            // Ajustando o título do gráfico.
            adjustTitleChart(n);

            // Ajustando o título do eixo X.
            adjustTitleX(n);

            // Ajustando o título do eixo Y.
            adjustTitleY(n);

        }
  
        // A function that create / update the plot for a given variable:
        function updateGrafico(selectedVar) {
  
            if (chartBuilded == 0) iniciarGrafico();
  
            /*
            dataset = [
                { uf: 'RJ', pib: 1100, covid:	20 },
                { uf: 'ES', pib: 1000, covid:	8 }
            ];
            console.log( dataset );
            */
            data = dataset;
    
            // X axis
            //x.domain(data.map(function(d) { return d.uf; }))
            x.domain(data.map(function(d) { return d[ myJsonMap.components.x.field ]; }))

            xAxis.transition().duration(1000);
            xAxis.call(d3.axisBottom(x));

            // Add Y axis
            //y.domain([0, d3.max(data, function(d) { return +d[selectedVar] }) ]);
            y.domain([0, d3.max(data, function(d) { return +d[ myJsonMap.components.y.field ] }) ]);

            yAxis.transition().duration(1000);
            yAxis.call(d3.axisLeft(y));

            // Cores para as barras
            var barColorType = 'SOLID';
            var barColor = 'black';
            if (myJsonMap.components.bar.colorType !== undefined)
                barColorType = myJsonMap.components.bar.colorType;

            if (myJsonMap.components.bar.barColor !== undefined)
                barColor = myJsonMap.components.bar.barColor;
            
            if (barColorType=='GRADIENT') {
                var corObject = convertColor(barColor);
                if (corObject['erro']==1) {
                    barColorType = 'SOLID';
                    barColor = 'black';
                }
                else {
                    //console.log(corObject);
                    // Descartando os valores iniciais e finais, pois são muito escuros e muito claros.
                    // Assim, a faixa vai ser de 10 até 90.
                    var intervaloGradiente = Math.floor(parseFloat(80 / dataset.length));
                }
            }


            // variable u: map data to existing bars
            var u = svg.selectAll('.bar').data(data);

            // update bars
            u.enter()
            .append('rect')
            .merge(u)
            .transition()
            .duration(1000)
            .attr('class', 'bar')
            .attr('x', function(d) { return x( d[ myJsonMap.components.x.field ] ); })
            .attr('y', function(d) { return y( d[ myJsonMap.components.y.field ] ); })
            .attr('width', x.bandwidth())
            .attr('height', function(d) { return height - y( d[ myJsonMap.components.y.field ] ); })
            .attr('fill', function(d,i) { 
                //console.log(i);
                if (barColorType == 'SOLID') {
                    if (barColor == 'RANDOM_COLOR')
                        return getRandomColor();
                    else
                        return barColor;
                }
                else {
                    hue = corObject.hue;
                    sat = parseFloat(corObject.sat * 100);
                    lightness = parseFloat( ((i+1)*(intervaloGradiente/100)) *100 );

                    hslString = 'hsl(' + hue + ', ' + sat + '%, ' + lightness + '%)';
                    newcor = convertColor(hslString);
                    return newcor.toHexString();
                }
            });


            // Mostrando os valores individuais como tooltip.
            u = svg.selectAll('rect').selectAll('.bar').data(data)
            .enter()
            .append('title')
            .text( function(d) { return d[ myJsonMap.components.y.field ] ; });




            // Ajustando o título do gráfico.
            adjustTitleChart();

            // Ajustando o título do eixo X.
            adjustTitleX();

            // Ajustando o título do eixo Y.
            adjustTitleY();
  
        }


        function displayButtons(myJsonMap) {
            content = '';
            for(var i=0;i<myJsonMap['visualizations']['length'];i++) {
                bt_label = i;
                if (myJsonMap['visualizations'][i]['buttonLabel'] !== undefined)
                    bt_label = myJsonMap['visualizations'][i]['buttonLabel'];

                content = content + 
                    '<button class="btn btn-success mt-2 text-center btn-sm" type="button" ' +
                    'style="margin-right:5px !important;" ' +
                    'onclick="show(' + i + ');">' + bt_label + '</button>';               
            }
            $('#div_buttons').html(content);

        }

        function updateHtmlTable(tableName, data, fields) {
            //console.log('updateHtmlTable.start');
            myheader='';
            for(var i=0;i<fields.length;i++)
                myheader+='<th>' + fields[i] + '</th>';

            if (myheader!='')
                myheader = '<tr>' + myheader + '</tr>';
            $('#' + tableName + ' thead').html(myheader);
            
            mybody='';
            for(var i=0;i<data.length;i++) {
                mybody +='<tr>';
                for(var j=0;j<fields.length;j++) {
                    tmpContent = eval( 'data[i]["' + fields[j] + '"]' );
                    mybody +='<td>' + tmpContent + '</td>';
                }
                mybody +='</tr>';
            }
            $('#' + tableName + ' tbody').html(mybody);
            //console.log('updateHtmlTable.end');
        }

        function setJsonVars() {
            //console.log('setJsonVars');
            // As variáveis passadas como parâmetro para o render 
            // podem ser armazenadas em uma variáveis JS no lado cliente.
            /*
            myJsonDoc = JSON.parse('<%- JSON.stringify(data.myJsonDoc) %>');
            myJsonMap = JSON.parse('<%- JSON.stringify(data.myJsonMap) %>');
            myDataFields = JSON.parse('<%- JSON.stringify(data.myDataFields) %>');
            datasets = JSON.parse('<%- JSON.stringify(data.datasets) %>');
            */

            myJsonDoc = JSON.parse('<%- JSON.stringify(data.myJsonDoc).replace("\'","\\\'") %>');
            myJsonMap = JSON.parse('<%- JSON.stringify(data.myJsonMap).replace("\'","\\\'") %>');
            myDataFields = JSON.parse('<%- JSON.stringify(data.myDataFields).replace("\'","\\\'") %>');
            datasets = JSON.parse('<%- JSON.stringify(data.datasets).replace("\'","\\\'") %>');

        }
  
        $( document ).ready(function() {
      
            $( '#btGraficoPIB' ).click(function( e ) {
                updateGrafico('pib');
            });

            $( '#btSankey1' ).click(function( e ) {
                mostrarSankey1();
            });

            // Set JSON data from server.
            setJsonVars();
            //console.log(myDataFields);

            // Update Html Table from data
            updateHtmlTable('tabelaDados', myJsonDoc, myDataFields);

            // Botão para cada visualização
            displayButtons(myJsonMap);
  
        });
    </script>

</body>
</html>
